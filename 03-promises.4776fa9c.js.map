{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,mBACnCE,KAAMH,SAASC,cAAc,kBAC7BG,OAAQJ,SAASC,cAAc,qBAG3BI,EAAe,CACnBC,aAAa,GA+Bf,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CArCbX,EAAKC,KAAKkB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBACF,MAAMjB,EAAakB,OAAOtB,EAAKI,WAAWmB,OACpClB,EAAOiB,OAAOtB,EAAKK,KAAKkB,OACxBjB,EAASgB,OAAOtB,EAAKM,OAAOiB,OAElC,IAAIC,EAAapB,EAEjB,IAAK,IAAIqB,EAAI,EAAGA,GAAKnB,EAAQmB,GAAK,EAChCD,GAAcnB,EACdI,EAAcgB,EAAGD,GACdE,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBb,EAAA6B,OAAOC,QACL,uBAAqBlB,QAAiBC,MAAWJ,EAC/C,IAGLsB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAClBb,EAAA6B,OAAOG,QACL,sBAAoBpB,QAAeC,MAAWJ,EAC9C,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('[name*=\"delay\"]'),\n  step: document.querySelector('[name*=\"step\"]'),\n  amount: document.querySelector('[name*=\"amount\"]'),\n};\n\nconst notifyConfig = {\n  closeButton: true,\n};\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const firstDelay = Number(refs.firstDelay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  let delayValue = firstDelay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    delayValue += step;\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          notifyConfig\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          notifyConfig\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","firstDelay","step","amount","$47d4ff9957288465$var$notifyConfig","closeButton","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","Number","value","delayValue","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.4776fa9c.js.map"}