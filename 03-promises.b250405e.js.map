{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,mBACnCE,KAAMH,SAASC,cAAc,kBAC7BG,OAAQJ,SAASC,cAAc,qBAG3BI,EAAe,CACnBC,aAAa,GA+Bf,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IArCPX,EAAKC,KAAKkB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAOF,IANA,IAAMjB,EAAakB,OAAOtB,EAAKI,WAAWmB,OACpClB,EAAOiB,OAAOtB,EAAKK,KAAKkB,OACxBjB,EAASgB,OAAOtB,EAAKM,OAAOiB,OAE9BC,EAAapB,EAERqB,EAAI,EAAGA,GAAKnB,EAAQmB,GAAK,EAEhChB,EAAcgB,EADdD,GAAcnB,GAEXqB,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MACjBb,EAAA8B,OAAOC,QACL,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,MAC5CJ,E,IAGLwB,OAAM,SAAAJ,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MAClBb,EAAA8B,OAAOI,QACL,sBAAqCF,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,MAC3CJ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('[name*=\"delay\"]'),\n  step: document.querySelector('[name*=\"step\"]'),\n  amount: document.querySelector('[name*=\"amount\"]'),\n};\n\nconst notifyConfig = {\n  closeButton: true,\n};\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const firstDelay = Number(refs.firstDelay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  let delayValue = firstDelay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    delayValue += step;\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          notifyConfig\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          notifyConfig\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","step","amount","$ce04d3a99e08e73b$var$notifyConfig","closeButton","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","Number","value","delayValue","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b250405e.js.map"}